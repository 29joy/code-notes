# =======================================================综合案例 数据可视化======================================================================
# 重点不在于可视化,而是在于巩固基础


# ==========================================================第十章 折线图====================================================================

/*-----------------------------------------------------------------------------------------------------------------------------------------------*/
# json数据格式

# 什么是json
"""
json是一种轻量级的数据交互格式,可以按照json指定的格式去组织和封装数据
本质上是一个带有特定格式的字符串
主要功能: json就是一个在各个编程语言中流通的数据格式,负责不同编程语言中数据传递和交互,好比英语作为国际通用语言和中国56个民族的通用语言普通话
例如: 各种编程语言存储数据的容器不尽相同,python中有字典而其他语言没有,为了让不同语言都能够相互通用的互相传递数据,json就是一种非常良好的中转数据格式
比如python和C语言之间的数据互传

json的数据格式要求严格
可以是{"name":"admin", "age":18}                                                               ==========>这不就是字典吗
也可以是[{"name":"admin","age":18}, {"name":"root","age":16}, {"name":"zhangsan","age":20}]    ==========>这不就是列表吗,只不过其中每个元素都是字典
所以, 可以认为json就是把python中的字典或者列表(元素都是字典)转化为字符串
"""

# 如何对json进行数据转化------------列表
# 导入json模块
import json
# 准备符合格式要求的python数据
data = [{"name":"admin","age":18}, {"name":"root","age":16}, {"name":"zhangsan","age":20}]
print(data)# 输出为[{'name': 'admin', 'age': 18}, {'name': 'root', 'age': 16}, {'name': 'zhangsan', 'age': 20}]
print(type(data))# 输出为<class 'list'>
# 通过json.dumps(data)方法把python数据转化为json数据
json_str = json.dumps(data)
print(json_str)# 输出为[{'name': 'admin', 'age': 18}, {'name': 'root', 'age': 16}, {'name': 'zhangsan', 'age': 20}]
print(type(json_str))# 输出为<class 'str'>   ===================>json的数据本身类型是str这里看上去像列表其实是一个特定str类型的数据
# 通过json.loads(data)方法把json数据转化为python数据
python_list = json.loads(json_str)
print(python_list)# 输出为[{'name': 'admin', 'age': 18}, {'name': 'root', 'age': 16}, {'name': 'zhangsan', 'age': 20}]
print(type(python_list))# 输出为<class 'list'>   
"""
所以如果别人通过json给我传递字符串数据,就可以转化为python列表或字典之后对其进行添加删除等等操作了
"""
# 假如包含中文:
import json
data = [{"name":"小山","age":18}, {"name":"阿水","age":16}, {"name":"鹏鹏","age":20}]
print(data)
json_str = json.dumps(data)
print(json_str)# 输出为[{"name": "\u5c0f\u5c71", "age": 18}, {"name": "\u963f\u6c34", "age": 16}, {"name": "\u9e4f\u9e4f", "age": 20}]
               # 可以看到这里name中的中文都转化为了unicode的字符
python_list = json.loads(json_str)
print(python_list)# 输出为[{'name': '小山', 'age': 18}, {'name': '阿水', 'age': 16}, {'name': '鹏鹏', 'age': 20}]
json_str = json.dumps(data, ensure_ascii=False)# ensure_ascii=False表示不用ASCII码去转换,可以正常的显示中文
print(json_str)# 输出为[{"name": "小山", "age": 18}, {"name": "阿水", "age": 16}, {"name": "鹏鹏", "age": 20}]

# 如何对json进行数据转化------------字典
import json
data = {"name":"小山","age":18}
print(data)
json_str = json.dumps(data)
print(json_str)# 输出为{"name": "\u5c0f\u5c71", "age": 18}
python_list = json.loads(json_str)
print(python_list)# 输出为{'name': '小山', 'age': 18}
json_str = json.dumps(data, ensure_ascii=False)
print(json_str)# 输出为{'name': '小山', 'age': 18}


/*-----------------------------------------------------------------------------------------------------------------------------------------------*/
# pyecharts模块介绍
"""
一、模块介绍
Echarts是百度开源的数据可视化框架
python适合用于数据处理,结合python就有了pyecharts
官网: pyecharts.org
gallery.pyecharts.org   画廊网站,除了会介绍的折线图地图和动态柱状图,可以在这里查看其他图表的实现代码,把数据换一下就可以实现不同图表


二、安装命令
命令提示符输入pip install pyecharts
安装完成后进入python,输入import pyecharts,能够导入成功就说明已经安装完成可以使用了


三、快速入门
1、构建一个基础的折线图
见pyecharts_practice.py文件和render1.html
2、使用全局配置项设置属性
pyecharts模块中有很多配置选项,常用到2个类别的选项:

# 全局配置选项: 针对整个图表全局
set_global_opts方法来配置全局配置选项
TitleOpts: 标题配置项
LegendOpts: 图例配置项
ToolboxOpts: 工具箱配置项
TooltipOpts: 提示框配置项
VisualMapOpts: 视觉映射配置项
DataZoomOpts: 区域缩放配置项
详见pyecharts_practice.py文件和render2.html

# 系列配置选项: 针对某个系列进行配置,如y轴的数据等

在pyecharts的官网可以看到官方文档关于全局或系列配置项的所有参数说明等
"""


/*-----------------------------------------------------------------------------------------------------------------------------------------------*/
# 数据处理
"""
通过json模块对数据进行处理
拿到一个json数据之后,可能以为数据很多不太方便看清数据结构,不方便后面分析,可以通过ab173懒人工具网站先看一下数据的结构
将数据cp进去就可以看到数据层级以及字典中key的命名等结构了
处理过程见文件line_chart_data_processing.py
"""


/*-----------------------------------------------------------------------------------------------------------------------------------------------*/
# 创建折线图
"""
使用了系列配置选项和一些其他的全局配置选项
见文件line_chart_data_processing_draft.py
"""


# ==========================================================第十一章 地图====================================================================
/*-----------------------------------------------------------------------------------------------------------------------------------------------*/
# 地图
"""
# 基础地图使用
pyecharts构建基础的地图
见map_pyecharts_practice.py
# 疫情地图-国内疫情地图
# 疫情地图-省级疫情地图
"""


# ==========================================================第十二章 动态柱状图====================================================================
/*-----------------------------------------------------------------------------------------------------------------------------------------------*/
# 动态柱状图
"""
# 基础柱状图
掌握构建一个基础的柱状图, 并能够翻转x轴和y轴
见bar_pyecharts_practice.py
"""


"""
# 基础时间线柱状图
掌握基础的时间线配置动态图表
掌握设置主题更改颜色样式

创建时间线
时间线Timeline()
柱状图描述的是分类数据, 回答的是每一个分类中“有多少”的问题, 这是柱状图的特点, 同时柱状图很难动态的描述一个趋势性的数据, pyecharts为此提供的
解决方案就是时间线
如果是一个bar、line对象是一张图表的话, 时间线就是创建一个一维的x轴, 轴上每一个点就是一个图表对象, 自动播放之后就像一个柱状图在动态变化一样
见bar_pyecharts_practice.py
"""


"""
# GDP动态柱状图绘制
掌握列表的sort方法并配合lambda匿名函数完成列表排序
完成图表所需的数据处理
完成GDP动态图表绘制
"""
