# ===============================================================第二章 基础知识====================================================================


/*-----------------------------------------------------------------------------------------------------------------------------------------------*/
print("hello world")
/*只认识英文标点符号*/
print("再输出一句别的")
"""
命令提示符内输入python就可以启动python,然后就可以输入代码来实现用python执行相关的代码了
也可以通过运行类似D:\00-code\python\pythonProject\0518practice的代码来运行某个代码文件
安装python环境,本质上就是在电脑中安装python的解释器程序python.exe,功能:翻译代码到二进制,把二进制文件提交给计算机运行
python中注释不是用//哈哈
"""


/*-----------------------------------------------------------------------------------------------------------------------------------------------*/
# 字面量:在代码中被写下来的固定的值
# python中6种值的类型
/*数字:分为整数int、浮点数float,复数,布尔4种*/
666
print(666)
13.14
print(13.14)
/*字符串:string 描述文本,用""包围,字符串可以包括中文英文数字符号等等等等*/
"0518 practice"
print("0518 practice")
/*列表*/
/*元祖*/
/*集合*/
/*字典*/


/*-----------------------------------------------------------------------------------------------------------------------------------------------*/
# 注释
/*注释的作用:代码进行解释说明*/

/*注释的使用:*/
/*单行注释#加文字,#和文字之间加一个空格*/
# 我是单行注释
print(13.14)# 也可以这样加单行注释
/*多行注释:一对三个双引号引起来的内容,如"""注释内容""",多行注释一般对文件、类或者方法进行注释,对文件进行注释的时候写在文件开头*/
"""
这是
一个
多行注释
"""


/*-----------------------------------------------------------------------------------------------------------------------------------------------*/
# 变量:在程序运行时,能存储计算结果或能表示值的抽象概念,简单的说就是记录数据用的,每个变量都有自己的值简称变量值
/*定义方式:变量名称 = 变量值,=是赋值用的*/
/*现在定义一个变量,记录钱包余额*/
money = 777
print("钱包里还有:", money)# 逗号隔开多个print变量

/*变量特征:变量值可以改变*/
/*现在买了一个雪糕,花了10元*/
money = money - 10 # python中的 + - * /
print("买了雪糕花了10元,钱包里还有:", money)


/*-----------------------------------------------------------------------------------------------------------------------------------------------*/
# 数据类型:见上面值的6中类型
/*type函数用于获得字面量或变量的类型*/
type(666)# 可以获得字面量的数据类型
print(type(666))# 方法一:语句嵌套来输出数据类型

int_type = type(666)
print(int_type)# 方法二:通过定义一个变量来记录数据类型,再将这个数据类型输出出来

int = 666
int_type = type(int)# 可以获得变量存储的数据类型
print(int_type)
/*变量没有类型,数据才有类型,这一点和C语言不同,C语言需要定义变量类型*/


/*-----------------------------------------------------------------------------------------------------------------------------------------------*/
# 数据类型转换
/*如何在int、float、str之间进行数据转换*/
"""
为什么要进行转换
从文件中读取的数字,默认是字符串,需要转换成数字类型才能使用
input()语句,默认结果是字符串,如果需要数字就需要类型转换
将数字转换成字符串用以写出到外部系统
等等
类型转换后,内容不会遭到破坏
例如:
"""
int(x)# 将x转换成一个整数
float(x)# 将x转换成一个浮点数
str(x)# 将x转换成一个字符串

int_str = str(11)
print(type(int_str), int_str)#将分别打印class str和11,注意11本身就可以是字符串,字符串可以包括中文英文数字符号等等等等

float_str = str(3.14)
print(type(float_str), float_str)#将分别打印class str和3.14,同上,小数本身就可以是字符串

str_int = int("11")
print(type(str_int), str_int)#将分别打印class int和11

str_float = float("3.14")
print(type(str_float), str_float)#将分别打印class float和3.14
/*数据类型转换的注意事项*/
"""
万物都可以转字符串,因为字符串可以包括中文英文数字符号等等等等,所以万物加上一个""就是字符串
但不是所有字符串都可以转数字,int("中文")运行会报错,int()需要内容全部是数字
"""
int_float = float("11")# 整数转化为浮点数
print(type(int_float), int_float)#将分别打印class float和11.0
float_int = int("3.14")# 浮点数转化为整数,精度会消失
print(type(float_int), float_int)#将分别打印class int和3,小数点后面的内容会消失


/*----------------------------------------------------------------------------------------------------------------------------------------------*/
# 标识符:变量、方法或类等代码中使用的一系列名字就叫标识符

/*标识符命名规则*/
"""
1、内容限定:只允许出现英文、中文、数字、下划线4类元素,其他内容都不被允许,但不推荐使用中文且数字不可以用在开头
关于python标识符命名为什么不能用数字开头:
如果标识符允许第一个字符为数字字符的话,那么 3e3 既可表示标识符(变量名),亦可表示数值:3*10^3, 编译时会显示二义性。 
如果一个变量以数字开头,那么分析器就必须在遇到第一个或第二个英文字符的时候回溯来确定是否是数字、变量名还是词法错误,这时候变成了二型文法。
二型文法分析器的好处是支持回溯和递归语法(所以语法分析是靠它的),但是缺点是状态机相比正则文法状态大大增加,而且代码写起来更困难。
考虑到词法分析部分只是用来断字,我们实在是没有为了支持变量名以数字开头这么一个小功能而让整个词法分析部分用二型文法写。
故,最后大家都默认了变量要避免用数字开头。
2、大小写敏感,完全能区分大小写如Andy和andy代表不同的变量,不会搞混
3、不可使用关键字
"""
# 错误代码示范
# 不可数字开头 1_name = "zhangsan"
# 不可使用下划线之外的符号 name_! = "zhangsan"
# 不可使用关键字 class = 1
# 大小写敏感同样适用于关键字 Class = 1 命名是可以的

/*标识符命名规范*/
"""
变量命名规范
1、见名知意:
尽量做到看到名字就知道意思如name = “张三”
尽量简洁,如可以用name定义名字,就没必要用name_shkahgah等加一堆没用的东西
2、下划线命名法
多个单词组合命名用下划线分隔,如first_name = “张三”
3、英文字母全小写
"""

"""
类命名规范
===================================================待补充===========================================================
"""

"""
方法命名规范
===================================================待补充===========================================================
"""


/*-----------------------------------------------------------------------------------------------------------------------------------------------*/
# 运算符:变量、方法或类等代码中使用的一系列名字就叫标识符

/*算数运算符*/
"""
+加
-减
*乘
/除    无论操作数是整数还是浮点数,得到的结果都是浮点数
//取整除    注意9//2得4,9.0//2.0得4.0,即结果与前面的数字类型保持一致
%取余
**指数
"""

/*赋值运算符*/
"""
=就是赋值运算符,把=右边的变量赋值给左边的变量
复合赋值运算符
+=    c+=a就是c = c + a,下面的依此类推
-=
*=
/=
//=
%=
**=
"""
num = 1 + 2 * 3
num += 2


/*-----------------------------------------------------------------------------------------------------------------------------------------------*/
# 字符串拓展

/*字符串三种定义方式*/
"""
1、单引号定义    如name = '张三'
2、双引号定义    如name = "张三"之前只介绍了双引号定义,最常用的方法
3、三引号定义    如name = """张三"""    和多行注释写法一样,同样支持内部换行,如果使用变量接收它就是字符串,不使用变量接收就是普通的多行注释
如
name = """
张三
你好
OK
"""
支持内部换行,可以type(name)会看到输出是class str
提问:如果一个字符串本身包含单引号或双引号自身,怎么写呢
解决方案:
1、用不同于所包含引号的定义方式
如包含双引号就用单引号定义字符串如name = 'zhang"san',输出name为zhang"san,反之亦然,如name ="zhang'san"输出name为zhang'san
2、用转义字符\将引号解除效用,变成普通字符串,如name = "zhang\"san",输出name为zhang"san
这时就不在乎定义字符串的引号是否与字符串本身包含的引号类型相同了
"""

/*字符串拼接*/
"""
字面量和变量或者变量与变量之间拼接,直接用加号+实现
如name = "张三"
tel = 18804283456
print("我的名字是" + name)# 拼接字面量和变量
print("我的名字是" + "张三")# 拼接字面量和字面量
print("我的名字是" + name + "我的电话是" + tel)# 会报错,字符串不能通过+与字符串以外的数据类型进行拼接,如数字类型等
"""

/*字符串格式化*/
"""
通过上面的字符串拼接会发现以下两个问题
1、在变量很多的情况下,字符串拼接太麻烦不好用,需要不断用+去拼接
2、字符串不能和其他类型进行拼接
解决办法就是字符串格式化

第一种方法:占位符
name = "张三"
tel = 18804283456
message1 = "我的名字是 %s" % name# 理解为占位拼接,%s中的%表示我要占位,s表示把变量变成字符串放入的位置,可以理解为先说明我要占位然后把变量放入占位的位置
message2 = "我的名字是%s,电话是%s" % (name, tel)# 可以与其他数据类型拼接,按照后面()内变量的顺序将不同变量放到不同的占位位置
print(message1)
print(message2)
注意,这里用%s拼接字符串之外的类型是将其他类型数据转换成字符串类型来输出
python支持的不同占位符
%s: 将内容转换成字符串,放入占位位置
%d: 将内容转换成整数,放入占位位置
%f: 将内容转换成浮点数,放入占位位置
所以对于数字可以用%d或者%f在不改变数字类型的情况下进行拼接
name = "张三"
tel = 18804283456
message2 = "我的名字是%s,电话是%d" % (name, tel)
print(message2)

第二种方法:f"内容{变量}"的方式实现快速格式化
name = "张三"
tel = 18804283456
message2 = "" % (name, tel)
print(f"我的名字是{name},电话是{tel}")
"""

/*字符串格式化的精度控制*/
"""
name = "张三"
salary = 12345.678
message2 = "我的名字是%s,工资是%f" % (name, salary)
print(message2)# 会输出我的名字是张三,工资是12345.678000,因为默认浮点数是输出小数点后六位,如何对数字进行精度控制呢
用"m.n"控制数据的宽度和精度
m: 控制宽度,必须是数字,设置的宽度小于数字本身时不生效,很少使用
.n: 控制小数点精度,必须是数字,会进行小数的四舍五入
如
%5d,表示将整数的宽度控制在5位,如果数字是11,被设置成5d,会输出[空格][空格][空格]11,用空格补足宽度
%5.2f,表示将宽度控制在5,小数点精度设置为2,小数点和小数点部分也算入宽度
如11.248设置为%7.2f后结果是[空格][空格]11.25,两个空格用来补足宽度,小数部分精确到2位,会四舍五入为11.25
%.2f,表示不限制宽度,只限制小数点后精度
name = "张三"
salary = 12345.678
message2 = "我的名字是%s,工资是%.2f" % (name, salary)
print(message2)# 会输出我的名字是张三,工资是12345.68

注意当使用f'内容{变量}'的方式实现快速格式化时不限数据类型也不做精度控制,如
name = "张三"
salary = 12345.678
print(f"我的名字是{name},工资是{salary}")会直接输出工资是12345.678,而不会输出12345.678000也不会四舍五入等
即浮点数原本是什么样就输出什么样,适合对数字精度没有要求的时候
"""

/*对表达式进行格式化*/
"""
什么是表达式:一条具有明确执行结果的代码语句
编程时无需使用变量进行存储的时候,表达式可以直接进行格式化

对表达式进行字符串拼接的方式
print("1*1的结果是%d" % (1 * 1))# 1 * 1本身就是一个表达式,所以直接在()内输入1 * 1就可以对它的结果进行格式化
print(f"1*1的结果是{1 * 1}")# f'内容{变量}'的方式实现快速格式化时也可以直接在{}内输入表达式
print("字符串在python中的类型是%s" % type("字符串"))# type("字符串")也是一个表达式,直接把表达式放入
"""

/*练习:股价计算小程序*/
"""
定义如下变量:
name 公司名
stock_price 当前股价
stock_code 股价代码
stock_price_daily_growth_factor 股票每日增长系数,浮点数类型,比如1.2
growth_days 增长天数
计算,经过growth_days天的增长后股价达到了多少钱
使用字符串格式化进行输出,如果海思浮点数,要求小数点精度2位数

"""
name = "钢铁侠company"
stock_price = 1.3
stock_code = 3333333
stock_price_daily_growth_factor = 1.2
growth_days = 7
predict_stock_price = stock_price_daily_growth_factor ** growth_days * stock_price
print(f"公司:{name},股票代码:{stock_code},当前股价:{stock_price}")
print("每日增长系数是:%f,经过%d天的增长后,股价达到了%.2f" % (stock_price_daily_growth_factor, growth_days, predict_stock_price))
# ----------------------------------纠错-------------------------------------
"""
stock_code变量应该用字符串类型定义而不是数字类型
stock_code = "3333333"
"""


/*-----------------------------------------------------------------------------------------------------------------------------------------------*/
# 数据输入

/*input()语句*/
"""
与print()完全相反,一个输入一个输出
input()从键盘获取输入
使用一个变量接收input()获取的内容就可以了
"""
print("请告诉我你是谁")
name = input()
print("我知道了,你是%s" % name)

# input()可以直接带出提示语句,所以上面的过程可以用下面的代替
name = input("请告诉我你是谁")
print("我知道了,你是%s" % name)
# input()会将所有输入默认为字符串类型
num = input("请输入你的银行卡密码")
print("你的银行卡密码类型是", type(num))# 输出为str,所以想要数字等类型需要使用数据类型转换
num_int = int(num)
print("你的银行卡密码类型是", type(num_int))# 输出为int类型
"""
练习:定义两个变量,用于获取用户的键盘输入,并给出提示信息
变量1,变量名user_name,记录用户名称
变量2,变量名user_type,记录用户类型
并通过格式化字符串的形式,通过print语句输出欢迎信息
"""
user_name = input("请输入您的用户名")
user_type = input("请输入您的用户类型")
print("您好,%s,您是尊贵的%s用户,欢迎您的光临" % (user_name, user_type))
