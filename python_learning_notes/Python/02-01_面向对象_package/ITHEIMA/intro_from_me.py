"""
我自己写的和老师写的出入还是非常大的, 我对面向对象和抽象类的理解还是不太对, 而且对__init__等的使用理解有误
跟着老师的思路先走一遍, 过程中自己实现, 逐步分析我哪里理解的不对
"""

"""
一、
老师的实现思路:
1、设计一个类, 可以完成数据的封装
2、设计一个抽象类, 定义文件读取的相关功能, 并使用了子类实现具体功能(因为文件存储方式不同, 所以读取方法不同)
3、读取文件, 生产数据对象
4、进行数据需求的逻辑计算(计算每一天的销售额)
5、通过pyecharts进行图形绘制

从这个实现思路来说, 我忽略的或者说我写的代码里写的不好的地方在于
我还是没有按照面向对象的思想来写代码, 我虽然使用了类等, 但是我完全是按照处理文件的顺序然后披上类的外衣去实现的
我想, 是不是应该是这样的, 面向对象是对这个世界事物的一种抽象方式, 所以无论写什么代码, 都把这个事情中涉及到的每一个事物先抽象出来
从这个角度出发, 那么这个过程中涉及到的事物有
1、被读取的文件, 从属性和行为的角度来分析, 它有存储内容(日期,订单编号,销售额,省份)、文件路径等属性, 文件的行为基本只有三个，读、写、追加
   数据内容因为各个文件可能不同，所以在这个文件的抽象类里不做定义，而是封装成一个数据类=====>data_define.py
2、读取文件的过程, 属性包括读取哪个文件、读到的文件内容是什么、读取之后存到哪里、以什么形式存储, 行为包括读取=====>file_define.py
3、计算, 因为要的是每天的销售额, 需要进行必要的计算, 属性包括被计算的数据、计算后的数据, 行为包括计算====>这个需要一个单独文件吗, 暂时放在main.py
4、绘图, 属性包括x轴内容、y轴内容、标题等, 行为包括图形绘制, 也就是add、render这些动作等(这个其实去分析pyecharts的实现就可以)
   ====>这个需要一个单独文件吗, 暂时放在main.py
分析之后发现, 这些事物其实正好对应了老师的实现思路, 那么这个分析目前看应该是对的, 下面依次将以上事物实现出来
"""
