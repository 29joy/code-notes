# ===============================================================第三章 逻辑判断====================================================================


/*-----------------------------------------------------------------------------------------------------------------------------------------------*/
# 布尔类型和比较运算符

/*掌握布尔类型用于表示真和假*/
"""
数字类型中的布尔bool类型
True表示真,本质上是数字记作1
False表示假,本质上是数字记作0

定义一个变量存储布尔类型数据,变量名称 = 布尔类型字面量,如 bool1 = True
布尔类型不仅可以自行定义,也可以通过计算得到,这就涉及到比较运算符了,比如 bool2 = 5 > 3,结果为True,那么judge就是True
"""

/*掌握比较运算符用于计算真和假*/
"""
== 判断是否相等
!= 判断是否不相等
> 判断是否大于
< 判断是否小于
>= 判断是否大于等于
<= 判断是否小于等于
"""


/*-----------------------------------------------------------------------------------------------------------------------------------------------*/
# if语句的基本格式

/*if语句的基本语法格式*/
"""
if 要判断的条件:
    条件成立时,要做的事情# python通过四个空格缩进,条件不成立则不执行这行代码
    不仅可以写一行代码,可以写多行代码,都会在条件成立时被执行

练习:
1、通过input语句,获取键盘输入,为变量age赋值(注意转换为数字类型)
2、通过if判断是否为成年人,满足条件输出提示信息
"""
print("欢迎来到儿童游乐场,儿童免费,成人收费")
age = int(input("请输入你的年龄:"))
if age >= 18:
    print("您已成年,游玩需要补票10元")
print("祝您游玩愉快")


/*-----------------------------------------------------------------------------------------------------------------------------------------------*/
# if else语句

print("欢迎来到儿童游乐场,儿童免费,成人收费")
age = int(input("请输入你的年龄:"))

if age >= 18:
    print("您已成年,游玩需要补票10元")
else:
    print("您未成年,可以免费游玩")

print("祝您游玩愉快")


/*-----------------------------------------------------------------------------------------------------------------------------------------------*/
# if elif else语句

/*判断条件不止一个*/
"""
if 条件1:
    条件1满足要做的事
elif 条件2:
    条件2满足要做的事
······
elif 条件N:
    条件N满足要做的事
else:
    所有条件都不满足要做的事
"""
print("欢迎来到儿童游乐场,儿童免费,成人收费")
height = int(input("请输入你的身高(cm):"))# 对输入进行设定,避免出现错误理解
vip_level = int(input("请输入你的VIP等级(1-5):"))# 对输入进行范围设定,避免出现错误理解

if height < 120:# 无论vip等级是多少,身高不足120cm都免费,所以这是第一个条件
    print("您的身高小于120cm,可以免费游玩")
elif vip_level >= 3:# 当身高大于120cm时,才需要对vip等级进行判断
    print("您的VIP等级大于3,可以免费游玩")
elif int(input("请告诉我今天几号:")) == 1:# 若前面的条件满足后面的就不会判断了
    print("1号是免费日,可以免费游玩")
else:# 都不满足需要补票
    print("不好意思,您需要补票10元")

print("祝您游玩愉快")
# 这个案例说明,在if elif else语句这种情况中,每种判断条件的顺序需要注意,因为在上面的条件不满足时才会往下进行,最后都不满足执行else
# 注意:若一个条件满足后面的就不会判断了
"""
练习:猜猜心里的数字
1、定义一个变量,数字类型,内容随意
2、基于input语句输入猜想的数字,通过if和多次elif的组合,判断猜想数字是否和心里数字一致
"""
num = 10
predict_num_1 = int(input("请输入第一次猜想的数字:"))
if predict_num_1 != num:
    predict_num_2 = int(input("不对,再猜一次:"))
elif predict_num_2 != num:
    predict_num_3 = int(input("不对,再猜最后一次:"))
elif predict_num_3 != num:
    print("sorry全部猜错啦,我想的是:%d" % num)

# 老师的写法
num = 10
if int(input("请输入第一次猜想的数字:")) == num:
    print("太棒啦,第一次就猜对了")
elif int(input("不对,再猜一次:")) == num:
    print("恭喜你猜对了")
elif int(input("不对,再猜最后一次:")) == num:
    print("恭喜您,终于在最后一次猜对啦")
else:
    print("sorry全部猜错啦,我想的是:%d" % num)


/*-----------------------------------------------------------------------------------------------------------------------------------------------*/
# 判断语句的嵌套

/*现实场景不仅有多个并列条件,还会有满足前置条件才能执行后续判断的情况,就需要用到嵌套*/
"""
注意多层嵌套之间的空格缩进
"""
print("欢迎来到儿童游乐场,儿童免费,成人收费")
height = int(input("请输入你的身高(cm):"))# 对输入进行设定,避免出现错误理解
vip_level = int(input("请输入你的VIP等级(1-5):"))# 对输入进行范围设定,避免出现错误理解

if height > 120:
    print("您的身高大于120cm,不可以免费游玩")
    print("如果你的VIP等级大于3,可以免费游玩")
    if vip_level > 3:# 当身高大于120cm时,才需要对vip等级进行判断
        print("您的VIP等级大于3,可以免费游玩")
    else:# 都不满足需要补票
        print("不好意思,您需要补票10元")
else:
    print("欢迎你小朋友,可以免费游玩")
print("祝您游玩愉快")


/*-----------------------------------------------------------------------------------------------------------------------------------------------*/
# 实战案例

/*猜数字案例代码*/
"""
定义一个数字(1-10随机产生),通过3次判断来才出数字
要求:
1、数字随机产生,范围1-10
2、有3次机会猜数字,通过3层嵌套判断实现
3、每次猜不中,会提示大了或小了
"""
import random
num = random.randint(1, 10)# 产生1-10的随机整数

pre_num_1 = int(input("请输入你猜测的数字:(1-10)"))

if pre_num_1 > num:#第一次猜大了
    pre_num_2 = int(print("猜大了,再猜一次:"))
    if pre_num_2 > num:#第二次猜大了
        pre_num_3 = int(print("猜大了,再猜最后一次:"))
        if pre_num_3 != num:#第三次没猜对
            print("sorry全部猜错啦,数字是:%d" % num)
        else:#第三次猜对了
            print("恭喜你,最后一次猜对啦！")

    elif pre_num_2 < num:#第二次猜小了
        pre_num_3 = int(print("猜小了,再猜最后一次:"))
        if pre_num_3 != num:#第三次没猜对
            print("sorry全部猜错啦,数字是:%d" % num)
        else:#第三次猜对了
            print("恭喜你,最后一次猜对啦！")

    else:#第二次猜对了
        print("恭喜你猜对啦！")

elif pre_num_1 < num:#第一次猜小了
    pre_num_2 = int(print("猜小了,再猜一次:"))
    if pre_num_2 > num:#第二次猜大了
        pre_num_3 = int(print("猜大了,再猜最后一次:"))
        if pre_num_3 != num:#第三次没猜对
            print("sorry全部猜错啦,数字是:%d" % num)
        else:#第三次猜对了
            print("恭喜你,最后一次猜对啦！")

    elif pre_num_2 < num:#第二次猜小了
        pre_num_3 = int(print("猜小了,再猜最后一次:"))
        if pre_num_3 != num:#第三次没猜对
            print("sorry全部猜错啦,数字是:%d" % num)
        else:#第三次猜对了
            print("恭喜你,最后一次猜对啦！")

    else:#第二次猜对了
        print("恭喜你猜对啦！")

else:#第一次猜对了
    print("恭喜你第一次就猜对啦！")

# 老师的写法
import random
num = random.randint(1, 10)# 产生1-10的随机整数
guess_num = int(input("输入你要猜测的数字:"))

if guess_num == num:
    print("恭喜,第一次就猜中了")
else:
    if guess_num > num:
        print("猜大了")
    else:
        print("猜小了")
    
    guess_num = int(input("再次输入你要猜测的数字:"))
    if guess_num == num:
        print("恭喜,第二次猜中了")
    else:
        if guess_num > num:
            print("猜大了")
        else:
            print("猜小了")
    
        guess_num = int(input("最后再猜一次:"))
        if guess_num == num:
            print("恭喜,最后一次猜中了")
        else:
            print("sorry全部猜错啦,数字是:%d" % num)
# 老师写的是更加简洁,哦麦,这怎么积累好的写法啊,只能是多看多写呗,我感觉我没啥天赋啊,不要这样想,后面会学到循环语句,就不需要这么嵌套了

















# ===============================================================第四章 循环语句====================================================================

/*-----------------------------------------------------------------------------------------------------------------------------------------------*/
# while循环的基础语法

"""
如B站的循环轮播图等背后都是循环语句
while 条件:
    条件满足时要做的事情1
    条件满足时要做的事情2
    条件满足时要做的事情3
执行完之后继续判断条件是否满足,只要满足就一直执行
"""
i = 0
while i < 100:
    print("小美我喜欢你")
    i += 1
# 所以循环一定要存在的内容包括,1、判断条件,2、循环终止条件,需要确保变量变化避免无限循环,3、缩进空格
"""
练习:求1累加到100的和
提示:
1、终止条件不要忘记
2、确保累加的数字从1开始到100结束
"""
i = 1
sum = 0
while i <= 100:
    sum += i
    i += 1


/*-----------------------------------------------------------------------------------------------------------------------------------------------*/
# while循环的基础案例

/*实现猜数字游戏*/
"""
设置一个范围1-100的随机整数变量,通过while循环,配合input语句,判断输入的数字是否等于随机数
1、无限次机会,直到猜中为止
2、每一次猜不中,会提示到了或者小了
3、猜完数字后,提示猜了几次
"""
import random
num = random.randint(1, 100)# 产生1-100的随机整数
guess_time = 1
guess_num = int(input("请进行猜测:"))
while guess_num != num:
    if guess_num > num:
        print("猜大了")
    else:
        print("猜小了")
    guess_num = int(input("请再猜一次:"))
    guess_time += 1
print("恭喜你猜对了,一共猜了%d次" % guess_time)

# 老师的写法
import random
num = random.randint(1, 100)
flag = True
count = 0
while flag:
    guess_num = int(input("请进行猜测:"))
    count += 1# 每进入一次循环就是猜了一次
    if guess_num == num:
        print("猜中了")
        flag = False# 用flag来管理循环,当满足终止条件时将flag设为false就不会再进入循环,用flag是否为true是管理无限次机会的一个很好的方法
    else:
        if guess_num > num:
            print("猜大了")
        else:
            print("猜小了")
print("恭喜你猜对了,一共猜了%d次" % count)
"""
老师的思路是更好的
1、猜测的数字控制在循环之中而不必在循环外定义guess_num
2、用flag作为判断条件,很方便,变更终止条件也很方便
3、用进入循环的次数表示进行猜测的次数,很巧妙,比我的好
"""


/*-----------------------------------------------------------------------------------------------------------------------------------------------*/
# while循环的嵌套应用

/*while嵌套循环的基本格式*/
"""
如B站的循环轮播图等背后都是循环语句
while 条件1:
    条件1满足时要做的事情1
    条件1满足时要做的事情2
    条件1满足时要做的事情3
    ······
    while 条件2:
        条件2满足时要做的事情1
        条件2满足时要做的事情2
        条件2满足时要做的事情3
    ······
执行完之后继续判断条件是否满足,只要满足就一直执行
"""
# 注意内层和外层循环都需要终止条件
# 空格缩进确定层次关系
"""
假设我要向小美表白100天,每天表白之前都要先送10朵玫瑰花
"""
i = 1
while i <= 100:
    print(f"今天是第{i}天,准备表白")

    j = 1
    while j <= 10:
        print(f"送给小美第{}枝玫瑰花")
        j += 1
    
    print("小美,我喜欢你")
    i += 1
print(f"坚持到第{i}天,表白成功")
"""
注意上面这样写的时候,最后打印的是“坚持到第101天,表白成功”,因为当i = 100进入循环时,最后会执行i += 1,所以print(f"坚持到第{i}天,表白成功")应该写成
print(f"坚持到第{i - 1}天,表白成功")
如果把i的定义改为i = 0开始,判断条件为while i < 100,那么这里就不用改,但是print(f"今天是第{i}天,准备表白")就要改成print(f"今天是第{i + 1}天,准备表白")
或者在循环内结尾的时候判断i是100就不执行+1了,这样不行, 这样就无限循环了X
所以,对于这样的循环,最后得到的i是多少一定要想明白,否则传给下面的可能就是一个错误的值
即,在最后的时候,i += 1这种变量变化,可能会导致i本身已经超出原本想要的范围,本案例中是100,而i变成了101
"""


/*-----------------------------------------------------------------------------------------------------------------------------------------------*/
# while循环的嵌套案例

/*九九乘法表*/
"""
print()默认输出语句会换行
print("hello", end='')这样就不会换行,如:
print("hello")
print("world")
输出为
hello
world
print("hello", end='')
print("hello", end='')
输出为hello world
"""

"""
制表符\t,相当于在键盘上按下tab键,可以实现多行字符串进行对齐
print("hello world")
print("itheima best")
输出为
hello world
itheima best
print("hello\teworld")
print("itheima\tbest")
输出会对齐
hello   world
itheima best
"""
i = 1
while i <= 9:
    j = 1
    while j <= i:
        print(f"{j}*{i}={i * j}\t", end='')
        j += 1
    i += 1
    print()#print空内容就是输出一个换行,我自己的代码缺了这一行


/*-----------------------------------------------------------------------------------------------------------------------------------------------*/
# for循环的基础语法

"""
while循环与for循环的区别:
while循环的循环条件时自定义的,自行控制循环条件
for循环是一种“轮询”机制,是对一批内容进行“逐个处理”,也叫遍历循环
for循环时无法定义循环条件的,只能从被处理的数据集中,依此取出内容处理,所以理论上说for循环无法构建无限循环,因为被处理的数据集不可能无限大
"""

"""
基础语法
for 临时变量 in 待处理数据集:
    循环满足条件时执行的代码
如遍历字符串
name = 'hello'
for x in name:# 将name的内容,逐个取出赋予x这个临时变量
    print(x)
输出结果为
h
e
l
l
o

练习:
确定一串字符串dfueiagfeuwfoejahaafaaa中一共有多少个a
"""
count = 0
name = dfueiagfeuwfoejahaafaaa# 错了,字符串name的定义应该为name = "dfueiagfeuwfoejahaafaaa"
for x in name:
    if x == 'a':
        count += 1
print(f"{name}中一共包含{count}个字母a")

"""
语法中的待处理数据集,严格来说,是一个序列类型
序列类型是指,其内容可以一个个依次取出的一种类型,包括字符串、列表、元祖等,目前只学了字符串类型

range语句:获取一个数字列表
range(num):获取一个从0开始,到num结束的数字序列,不包含num本身,如range(5)将获得[0,1,2,3,4]
range(num1, num2):获取一个从num1开始,到num2结束的数字序列,不包含num2本身,如range(5, 9)将获得[5,6,7,8]
range(num1, num2, step):获取一个从num1开始,到num2结束的数字序列,不包含num2本身,数字之间的步长以step为准,step默认为1
如range(5, 10, 2)将获得[5,7,9]

range一般用在for循环中
"""
for x in range(10):
    print(x)
# 将得到
# 0
# 1
# 2
# 3
# 4
# 5
# 6
# 7
# 8
# 9
"""
用range更好的实现送玫瑰花
用while
i = 1
while i < 10:
    print("送玫瑰花")
    i += 1
用range就简单了
for x in range(10):
    print("送玫瑰花")

练习:有几个偶数
定义一个数字变量num,内容随意
并使用range语句获取从1到num的序列,使用for循环遍历它
在遍历的过程中统计有多少个偶数出现
"""
num = 10
count = 0
for x in range(1, 10):
    if x % 2 == 0:
        count += 1
print(f"1到{num}范围内有{count}个偶数")

"""
变量作用域
for循环语句中的临时变量,规范上它的作用范围只限定在for循环内部
如果在for循环外部要访问这个临时变量,实际上可行,但是不推荐
如
"""
for i in range(10):
    print(i)
print(i)#一般会提示i没有定义

i = 0# 在for循环之前一天定义好,在for循环的过程中会对i的值进行赋值,就可以在for循环的外部访问这个i了
for i in range(10):
    print(i)
print(i)


"""
for循环的补充
鉴于我在文件操作的读取文件部分练习中犯了关于for循环的错误,补充如下知识点:

在 Python 中,for循环的行为取决于被迭代对象的类型及其迭代器实现。
for循环本质上是通过调用对象的 __iter__() 方法获取一个迭代器,然后重复调用迭代器的 __next__() 方法,直到抛出 StopIteration 异常。
不同对象的迭代行为不同,这是由它们的迭代器实现决定的。


0、底层机制:迭代协议(Iterator Protocol)
Python 的 for 循环依赖于迭代协议:
调用 iter(obj) 获取迭代器(相当于调用 obj.__iter__())。
重复调用 next(iterator)(相当于调用 iterator.__next__())获取下一个值。
捕获 StopIteration 异常时停止循环。
示例模拟 for 循环的底层行为:
my_list = [1, 2, 3]
iterator = iter(my_list)  # 调用 my_list.__iter__()
while True:
    try:
        item = next(iterator)  # 调用 iterator.__next__()
        print(item)
    except StopIteration:
        break


1、文件对象按行迭代的逻辑
当用for循环遍历一个文件对象时,文件会逐行返回内容。这是因为:
文件对象的迭代器(__iter__() 方法)被设计为按行读取,这是文件对象的默认行为。
文件对象的 __next__() 方法会调用readline(),每次返回一行内容(包括换行符 \n),直到文件结束。
这种设计是为了方便处理文本文件(尤其是日志、CSV 等按行组织的文件),避免一次性加载大文件导致内存问题。
with open("file.txt", "r") as f:
    for line in f:  # 逐行迭代
        print(line.strip())


2、列表(List)、元组(Tuple)、集合(Set)
直接按元素顺序迭代(集合是无序的,但会逐个返回元素)。
for item in [1, 2, 3]:  # 依次返回 1, 2, 3
    print(item)


3、字符串(Str)
按字符迭代。
for char in "hello":  # 返回 h, e, l, l, o
    print(char)


4、字典(Dict)
默认迭代键(keys()),但可以通过方法选择迭代值(values())或键值对(items())。

d = {"a": 1, "b": 2}
for key in d:          # 迭代键:a, b
for value in d.values(): # 迭代值:1, 2
for k, v in d.items():  # 迭代键值对:("a", 1), ("b", 2)


5、也可以自定义对象
自定义对象
如果类实现了 __iter__() 方法,for 循环会按该方法定义的逻辑迭代。
class MyRange:
    def __init__(self, n):
        self.n = n
    def __iter__(self):
        return iter(range(self.n))

for num in MyRange(3):  # 返回 0, 1, 2
    print(num)
"""


/*-----------------------------------------------------------------------------------------------------------------------------------------------*/
# for循环的嵌套应用

"""
for 临时变量 in 待处理数据集:
    循环满足条件时执行的代码1
    循环满足条件时执行的代码2
    ······
    for 临时变量 in 待处理数据集:
        循环满足条件时执行的代码1
        循环满足条件时执行的代码2
用for循环实现小美表白案例
"""
i = 1
for i in range(1, 101):
    print(f"今天是第{i}天,准备表白")
    for j in range(1,11):
        print(f"送给小美第{j}枝玫瑰花")
    print("小美,我喜欢你")
# print(f"坚持到第{i - 1}天,表白成功")#注意这里不需要i - 1了,因为i最多只会到100,不会到101
print(f"坚持到第{i}天,表白成功")

# 注意while循环和for循环也可以相互嵌套
"""
for循环打印九九乘法表
"""
for i in range(1, 10):
    j = 1
    for j in range(j, i + 1):
        print(f"{j}*{i}={i * j}\t", end='')
    print()
# 老师的写法,比我的更简洁
for i in range(1, 10):
    for j in range(1, i + 1):
        print(f"{j}*{i}={i * j}\t", end='')
    print()

/*-----------------------------------------------------------------------------------------------------------------------------------------------*/
# 循环中断:break和continue

"""
在循环过程中,会出现一些其他情况,让我们不得不:
1、暂时跳过某次循环,直接进行下一次
2、提前退出循环,不再继续

continue:中断本次循环,直接进入下一次循环,可以用于for和while循环,效果一致
for i in range(1, 100):
    语句1
    continue
    语句2
上述代码在循环内,遇到continue就结束当次循环,进行下一次,所以语句2不会被执行
应用场景:在循环中,因某些原因,临时结束本次循环
"""
for i in range(1, 6):
    print("语句1")
    continue
    print("语句2")#语句2并不会被输出

# continue也可以用在嵌套循环中,如果写在内层循环,continue的控制范围只是内层循环
for i in range(1, 6):
    print("语句1")
    for j in range(1, 6):
        print("语句2")
        continue
        print("语句3")#只有语句3不会被输出
    print("语句4")

"""
break:用于直接结束循环,可以用于for和while循环,效果一致
for i in range(1, 100):
    语句1
    break
    语句2
语句3
在循环内,遇到break就结束循环了,所以执行语句1之后就直接执行语句3了
"""
for i in range(1, 101):
    print("语句1")
    break
    print("语句2")
print("语句3")
# 运行结果只有一次语句1和一次语句3的打印,其他都不会有
# break也可以用在嵌套循环中,如果写在内层循环,break的控制范围同样只是内层循环
for i in range(1, 6):
    print("语句1")
    for j in range(1, 6):
        print("语句2")
        break
        print("语句3")
    print("语句4")
# 与continue那个情况不同的是,这里执行到内循环语句2只会打印1次,continue的时候内循环语句2会执行5次


/*-----------------------------------------------------------------------------------------------------------------------------------------------*/
# 综合案例

/*发工资案例*/
"""
某公司,账户余额1万元,给20名员工发工资
员工编号1-20,从编号1开始,依次领取工资,每人可领取1千元
领工资时,财务判断员工的绩效分(1-10分)随机生成,如果低于5,不发工资,换下一位
如果工资发完了,结束发工资
continue跳过员工,break直接结束发工资
"""
import random

balance = 10000
salary = 1000

for i in range(1, 21):
    performance_score = random.randint(1, 10)
    if performance_score < 5:
        print(f"员工{i},绩效分{perperformance_score},低于5,不发工资,下一位")
        continue
    else:
        balance -= salary
        print(f"向员工{i}发放工资1000元,账户余额还剩{balance}元")
        if balance == 0:
            print("工资发完了,下个月领取吧")
            break
#老师写的
import random

balance = 10000

for i in range(1, 21):
    performance_score = random.randint(1, 10)
    if performance_score < 5:
        print(f"员工{i},绩效分{perperformance_score},低于5,不发工资,下一位")
        continue

    if balance >= 1000:
        balance -= 1000
        print(f"向员工{i}发放工资1000元,账户余额还剩{balance}元")
    else:
        print("工资发完了,下个月领取吧")
        break
# 其实我的和老师写的就是判断余额是否为0的地方层次不一致,这样有什么关系吗,似乎不会吧,因为作用都是退出当前循环
