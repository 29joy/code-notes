# 全局变量如何在函数内被修改,global声明
# 函数说明


# ===============================================================第五章 函数========================================================================


/*-----------------------------------------------------------------------------------------------------------------------------------------------*/
# 函数介绍:函数是组织好的,可重复使用的,用来实现特定功能的代码段
"""
举例:完成字符串长度的计算
"""
str1 = "fheiwohafeb"
str2 = "hfudeifgaehfuhugfcdbdsvdww"
str3 = "hello world hfeiwahfejwbfjw"

count = 0
for i in str1:
    count += 1
print(f"字符串{str1}的长度是{count}")
return count
#如何把这个功能拓展到对所有字符串都适用呢
def my_len(str):
    count = 0
    for i in str:
        count += 1
    print(f"字符串{str}的长度是{count}")
    return count

my_len(str1)
my_len(str2)
my_len(str3)


/*-----------------------------------------------------------------------------------------------------------------------------------------------*/
# 函数定义

"""
函数的定义:
def 函数名(传参):
    函数体
    return 返回值

函数的调用:
函数名(参数)

传参和返回值如果不需要可省略
函数必须先定义后使用
"""
def say_hi():
    print("你好,我是XXX")

# 函数定义之后必须被调用才能发挥作用
say_hi()
"""
练习,定义一个函数,自动输出欢迎语
"""
def welcome():
    print("你好,欢迎来到游乐园")
    print("小朋友免费游玩")

# \n换行符,如print("你好,欢迎来到游乐园\n小朋友免费游玩")输出时小朋友免费游玩会灵气一行输出,所以上面的函数可以简化为
def welcome():
    print("你好,欢迎来到游乐园\n小朋友免费游玩")


/*-----------------------------------------------------------------------------------------------------------------------------------------------*/
# 函数参数

"""
函数参数的功能:在函数进行计算的时候,接受外部(调用时)提供的数据
函数定义中的参数为形式参数,参数之间使用逗号分隔
函数调用时,参数称之为实际参数,传入的时候,按照顺序传入数据,使用逗号分隔
传入参数的数量不受限制,可以不使用参数也可以使用N个参数
"""
def add():
    sum = 1 + 2
    print(f"{1}+{2}的结果是{sum}")
# 上面的函数只能计算1+2,用传参可以实现计算任意两个数字的和
def add(x, y):
    sum = x + y
    print(f"{x}+{y}的结果是{sum}")

add(1, 2)
add(5, 6)
"""
练习,核酸检测,输入体温,体温大于37.5度需要提示异常
"""
def check(tem):
    print("欢迎来到核酸检测中心\n请测量体温")
    if num <= 37.5:
        print("体温正常")
    else:
        print("体温异常,需隔离")

check(37)
/*-----------------------------------------------------------------------------------------------------------------------------------------------*/
# 函数返回值

/*函数返回值的定义*/
"""
函数返回值的作用:函数执行之后,将结果返回给函数的调用者
需要一个变量来接收返回值
return
函数体遇到return就结束了,return之后的代码无效
"""
# 定义一个函数,完成2数相加功能
def add(a, b):
    result = a + b
    # 通过返回值,将相加结果返回给调用者
    return result
# 使用一个变量接收函数返回值
sum = add(2,6)

/*None类型*/
"""
如果函数没有使用return语句返回数据,那么函数有返回值吗
答案是,有
None类型
无返回值的函数,实际上就是返回了None这个字面量
None表示空的,无实际意义,函数返回none就表示返回空
"""
def say_hi():# 写一个无返回值的函数
    print("hello world")

re = say_hi()# 但是用一个变量接收该函数的返回值
print(f"无返回值函数,返回的内容是{re}")# 输出结果为None
print(f"无返回值函数,返回的内容类型是{type(re)}")# 输出结果为None类型

def say_hi():
    print("hello world")
    return None# 也可以手动return一个None值

re = say_hi()
print(f"无返回值函数,返回的内容是{re}")# 输出结果为None
print(f"无返回值函数,返回的内容类型是{type(re)}")# 输出结果为None类型

"""
None类型的应用场景:
1、用在函数无返回值
2、用在if判断上
    在if判断中,None等同于False
    一般会和函数主动返回None做配合
    例如在一个函数中,不同情况下返回值不同,可以通过判断返回值来执行不同的代码,即调用之后会根据调用结果进行判断,见举例
3、用于声明一些无内容的变量
    定义某个变量,但暂时不需要变量有具体值,可以用None来代替,如程序后续可能会有操作给它赋值,但是当前并不会赋值的情况
"""
# 2的举例
def check_age(age):
    if age > 18:
        return "success"
    else:
        return None

result = check_age(16)
if not result:# 当result为None的时候,not result就是True了,这里用not result表示进入了返回值为None的情况
    # 进入返回值为None的情况 
    print("未成年,不可进入")


/*-----------------------------------------------------------------------------------------------------------------------------------------------*/
# 函数说明文档

/*通过注释对函数进行解释说明*/
"""
函数是纯代码语言,想要理解其含义,就需要一行行的阅读理解代码,效率低
给函数添加说明文档,辅助理解函数的作用,
通过多行注释的形式,对函数进行说明解释,写在函数体之前,在大型程序代码中是必要的
语法如下:
def func(x, y):
    """
    函数说明
    :param x: 形参x的说明
    :param y: 形参y的说明
    :return: 返回值的说明
    """
    函数体
    return 返回值
"""
def add(x, y):
    """
    add two number and return sum of them
    :param x: the first number
    :param y: the second number
    :return: return sum of first and second number
    """
    sum = x + y
    print(f"两数相加的结果是{sum}")
    return sum

add(3, 4)# 悬停可以查看函数add的说明文档


/*-----------------------------------------------------------------------------------------------------------------------------------------------*/
# 函数嵌套调用

"""
函数的嵌套调用指一个函数里面又调用了另外一个函数
函数A中执行到调用函数B的语句,会将函数B全部执行完成后,继续执行函数A的剩余内容
"""


/*-----------------------------------------------------------------------------------------------------------------------------------------------*/
# 变量作用域

"""
变量作用域指变量的作用范围
局部变量:定义在函数内部的变量,作用域为函数内部,在函数运行时临时保存,函数运行结束后立即被销毁,在函数外不可被访问,会报错“变量 is not defined“
全局变量:在函数体内和函数体外都可以生效的变量
    将变量定义在函数外边,这样很多函数都可以同时使用该变量或者同时在本函数内对该变量进行赋值
    global关键字:想在
"""
# 全局变量说明举例
num = 200

def test_a():
    print(f"test_a: {num}")

def test_b():
    num = 500
    print(f"test_b: {num}")

test_a()# 输出为test_a: 200
test_b()# 输出为test_b: 200
print(num)# 输出为200
#上面的例子说明不同的函数都可以使用全局变量

# golbal关键字说明举例
num = 200

def test_a():
    print(f"test_a: {num}")

def test_b():
    num = 500
    print(f"test_b: {num}")

test_a()# 输出为test_a: 200
test_b()# 输出为test_b: 500
print(num)# 输出为200
"""
本意为想要在test_b函数中改变全局变量num的值,为什么只有test_b输出为500
因为上面例子中的改法,相当于在test_b函数中定义了一个局部变量num,它print的时候是打印的局部变量num而非全局变量num,所以不能实现在函数内改变全局变量值的功能
"""
# global关键字可以实现在函数体内改变全局变量的功能
num = 200

def test_a():
    print(f"test_a: {num}")

def test_b():
    # global关键字声明num是全局变量
    global num
    num = 500
    print(f"test_b: {num}")

test_a()# 输出为test_a: 200
test_b()# 输出为test_b: 500
print(num)# 输出为500


/*-----------------------------------------------------------------------------------------------------------------------------------------------*/
# 综合案例

"""
练习:ATM机,最终代码见atm.py
主菜单效果
查询余额效果
存、取款效果
实现细节:
定义一个全局变量money,用来记录银行卡余额,默认5000000
定义一个全局变量name,用来记录客户姓名,程序启动时输入
定义如下函数:
    查询余额函数
    存款函数
    取款函数
    主菜单函数
要求:
程序启动后,要求输入客户姓名
查询余额、存款、取款后都会返回主菜单
存款、取款后,都应显示一下当前余额
客户选择退出或输入错误程序会退掉,否则会一直运行
"""
money = 5000000
name = None

def menu():
    print("---------------------主菜单---------------------")
    print("查询余额\t\[输入1\]\n存款\t\[输入2\]\n取款\t\[输入3\]\n退出\t\[输入4\]\n")

def check_balance():
    print("---------------------查询余额---------------------")
    print(f"{name}你好,你的余额为{money}")

def save_money():
    save_num = 50000

    global money
    money += save_num
    print("---------------------存款---------------------")
    print(f"{name}你好,你存款{save_num}成功\n你的余额为{money}")

def take_money():
    take_num = 50000

    global money
    money -= take_num

    print("---------------------取款---------------------")
    print(f"{name}你好,你取款{take_num}成功\n你的余额为{money}")

def quit():
    print("感谢您的光临")

def atm_main():
    global name
    name = input("请输入您的姓名")

    menu()
    num = int(input("请输入您的选择"))

    while num:
        if num = 1:
            check_balance()
            menu()
        elif num = 2:
            save_money()
            menu()
        elif num = 3:
            take_money()
            menu()
        elif num = 4:
            quit()
            break
        else:
            print("输入错误,请重新输入")
            menu()
            num = int(input("请输入您的选择"))

atm_main()














# ===============================================================第七章 函数进阶=============================================================


/*-----------------------------------------------------------------------------------------------------------------------------------------------*/
# 函数的多返回值, 知道如何使函数返回多个返回值
"""
下面的函数写了两个return程序会如何执行
答: 只会执行第一个return, 因为return可以推出当前函数,导致return下方的代码不执行
def test():
    return 1
    return 2

那想要返回多个返回值怎么书写代码:
    用一个return返回多个返回值
    按照返回值的顺序,写对应顺序的多个变量接收即可
    变量之间用逗号隔开
    支持不同类型的数据return
"""
def test():
    return 1, 2, "hello", True
x, y, m, n = test()
print(x)# 结果为1
print(y)# 结果为2
print(m)# 结果为"hello"
print(n)# 结果为True


/*-----------------------------------------------------------------------------------------------------------------------------------------------*/
# 函数的多种传参方式
/*位置参数*/
"""
位置参数:调用函数时根据函数定义的参数位置来传递参数
注意:传递的参数和定义的参数的顺序及个数必须一致
"""
def user_info(name, age, gender):
    print(f"名字{name}, 年龄{age}, 性别{gender}")

user_info("Tom", 20, "male")


/*关键字参数*/
"""
关键字参数: 函数调用的时候通过"键=值"形式传递参数
作用: 可以让函数更加清晰、容易使用,同时也清除了参数的顺序要求
"""
def user_info(name, age, gender):
    print(f"名字{name}, 年龄{age}, 性别{gender}")
# 关键字传参
user_info(name = "Tom", age = 20, gender = "male")
# 不按固定顺序
user_info(age = 20, name = "Tom", gender = "male")
# 和位置参数混用,位置参数必须在前且匹配参数顺序,注意,函数调用时如果有位置参数,位置参数必须在关键字参数的前面,但关键字参数之间不存在先后顺序
user_info("Tom", age = 20, gender = "male")
user_info("Tom", gender = "male", age = 20)# Tom在前,gender和age的顺序无所谓
user_info(gender = "male", "Tom", age = 20)# 报错SyntaxError: positional argument follows keyword argument,Tom位置参数放在了关键字参数后面
user_info(name = "Tom", 20, gender = "male")# 报错SyntaxError: positional argument follows keyword argument,20位置参数放在了关键字参数后面
user_info(20, name = "Tom", gender = "male")# 报错TypeError: user_info() got multiple values for argument 'name'
"""
所以说,关键字参数如果要和位置参数混用,那么位置参数必须是前面的,这个例子里就是name,不能只有age或gender是位置参数,
可行的混用方案是:
    name位置,age和gender关键字
    name和age位置,gender关键
    没有其他可能了,因为一旦第一个参数没有指定关键字,那么它一定是位置参数,就百分百指向name
"""


/*缺省参数*/
"""
也叫默认参数,用于定义函数,为参数提供默认值,调用函数时可不传该默认参数的值,
注意,所有位置参数必须出现在默认参数前,包括函数定义和调用
作用,当调用函数没有传递参数,就会使用默认缺省参数值,如果为缺省参数传值则修改默认参数值转而使用传入的值
"""
def user_info(name, age, gender = "男"):
    print(f"名字{name}, 年龄{age}, 性别{gender}")
# 关键字传参
user_info(name = "Tom", age = 20)# 输出名字Tom, 年龄20, 性别男
user_info(name = "lily", age = 20, gender = "女")# 输出名字lily, 年龄20, 性别女

def user_info(name = "xiaoming", age, gender):
    print(f"名字{name}, 年龄{age}, 性别{gender}")
# 报错SyntaxError: parameter without a default follows parameter with a default,默认参数必须放在位置参数后


/*不定长参数*/
"""
也叫可变参数,用于不确定调用时会传递多少个参数的场景(不传承也可以)
作用,当调用函数时不确定参数个数时,可以使用不定长参数
分为位置传递不定长和关键字传递不定长
"""
# 位置传递不定长: 传进的所有参数都会被args变量收集,它会根据传进参数的位置合并为一个元组tuple,args是元组类型
def user_info(*args):
    print(args)
user_info("Tom")# 输出('Tom',),args是元组所以有()包含元素
user_info("Tom", 20)# 输出('Tom', 20),args是元组所以有()包含元素
user_info(name = "Tom", age = 20)# 报错TypeError: user_info() got an unexpected keyword argument 'name'

# 关键字传递不定长: 参数是"键=值"形式的情况下,所有的"键=值"都会被kwargs接收并根据"键=值"组成字典
def user_info(**kwargs):
    print(kwargs)
user_info(name = "lily", age = 20, gender = "女")# 输出{'name': 'lily', 'age': 20, 'gender': '女'}
user_info("Tom", 20)# 报错TypeError: user_info() takes 0 positional arguments but 2 were given,必须以键值对的形式传入


/*-----------------------------------------------------------------------------------------------------------------------------------------------*/
# 匿名函数
/*函数作为参数传递*/
"""
add函数作为参数传入test_func这个函数中并且在test_func函数中被使用, 传递的是一种计算逻辑而非数据
"""
def test_func(func):
    result = func(1, 2)
    print(result)

def add(x, y):
    return x + y

test_func(add)# 结果为3
print(type(add))# class function


/*lambda匿名函数*/
"""
def定义带有名称的函数,带有名称的函数可以基于名称重复使用
lambda定义匿名函数(无名称),匿名函数只可临时使用一次
语法: lambda 传入参数: 函数体(一行代码)
    lambda是关键字,表示定义匿名函数
    传入参数表示匿名函数的形参,如x,y表示接收2个形参
    函数体,就是函数的执行逻辑,要注意,只能写一行,无法写多行代码
所以能用一行代码实现又不需要重复使用的函数可以用lambda定义,使用还是很常见的,比如Spark Flink框架等
"""
def test_func(func):
    result = func(1, 2)
    print(result)

test_func(lambda x, y: x + y)# 通过lambda x, y: x + y将匿名函数功能传递给了test_func,与add的功能完全一致,只不过只能使用一次
